[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'junegunn/rainbow_parentheses.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'simeji/winresizer'



[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'preservim/nerdtree'
hook_source = '''
command Tree NERDTreeToggle
highlight LineNr ctermbg=16 
highlight LineNr ctermfg=8
'''

[[plugins]]
repo = 'lervag/vimtex'
hook_source = '''
let g:vimtex_compiler_latexmk_engines = { '_' : '-pdfdvi'  }
let g:vimtex_compiler_latexmk = { 'continuous' : 0, }
'''

[[plugins]]
repo = 'alvan/vim-closetag'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_source = '''
let g:lightline = {
	\ 'colorscheme': 'PaperColor_light',
	\ 'mode_map': {'c': 'NORMAL'},
	\ 'active': {
		\   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
			\ },
	\ 'component_function': {
		\   'modified': 'LightlineModified',
		\   'readonly': 'LightlineReadonly',
		\   'fugitive': 'LightlineFugitive',
		\   'filename': 'LightlineFilename',
		\   'fileformat': 'LightlineFileformat',
		\   'filetype': 'LightlineFiletype',
		\   'fileencoding': 'LightlineFileencoding',
		\   'mode': 'LightlineMode'
			\ }
	\ }

function! LightlineModified()
	return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
	endfunction

function! LightlineReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
	endfunction

function! LightlineFilename()
	return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
	\ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
			\  &ft == 'unite' ? unite#get_status_string() :
			\  &ft == 'vimshell' ? vimshell#get_status_string() :
			\ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
	\ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
	endfunction

function! LightlineFugitive()
	if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
return fugitive#head()
	else
	return ''
	endif
	endfunction

function! LightlineFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
	endfunction

function! LightlineFiletype()
	return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
	endfunction

function! LightlineFileencoding()
	return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
	endfunction

function! LightlineMode()
	return winwidth(0) > 60 ? lightline#mode() : ''
	endfunction
	'''
